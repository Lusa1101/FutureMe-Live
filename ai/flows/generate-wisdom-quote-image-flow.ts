import { defineFlow } from '@genkit-ai/flow';
import { generate } from '@genkit-ai/ai';
import { gemini15Flash } from '../genkit';
import { z } from 'zod';

const GenerateWisdomQuoteImageInputSchema = z.object({
  messageText: z.string(),
});

const GenerateWisdomQuoteImageOutputSchema = z.object({
  imageDataUri: z.string(),
  extractedWisdom: z.string(),
});

const WisdomExtractionSchema = z.object({
  wisdom: z.string().describe('The extracted wisdom quote. If an "Unexpected toilet wisdom:" prefix is found, that phrase should be extracted. Otherwise, it should be the single most philosophical, humorous, or insightful sentence from the entire message. If nothing suitable is found, return an empty string.'),
});

defineFlow(
  {
    name: 'generateWisdomQuoteImage',
    inputSchema: GenerateWisdomQuoteImageInputSchema,
    outputSchema: GenerateWisdomQuoteImageOutputSchema,
  },
  async ({ messageText }) => {
    // Step 1: Extract wisdom from the message
    const wisdomExtractionPrompt = `
Analyze the following ToiletGPT message and extract the most meaningful piece of "toilet wisdom" from it.

Rules:
1. First, look for any sentence that explicitly starts with "Unexpected toilet wisdom:" - if found, extract that entire sentence.
2. If not found, identify the single most philosophical, humorous, or insightful sentence from the entire message that would work well as a motivational quote.
3. The extracted wisdom should be concise, meaningful, and suitable for overlaying on a scenic image.
4. If no suitable wisdom is found, return an empty string.

Message to analyze:
"${messageText}"

Extract the wisdom quote:`;

    const wisdomResult = await generate({
      model: gemini15Flash,
      prompt: wisdomExtractionPrompt,
      output: {
        schema: WisdomExtractionSchema,
      },
      config: {
        temperature: 0.3,
        maxOutputTokens: 200,
      },
    });

    // Safely access the wisdom property using optional chaining
    const extractedWisdom = wisdomResult.output()?.wisdom;

    if (!extractedWisdom) {
      throw new Error('No suitable wisdom could be extracted from the message');
    }

    // Step 2: Generate scenic image with the wisdom quote
    const imagePrompt = `Generate a beautiful and visually captivating scenic landscape image (e.g., majestic mountains, serene forests, expansive oceans, or abstract representations of nature).
Clearly overlay the following quote onto the image. The text should be in an elegant, readable font, well-placed, and have good contrast against the background to ensure legibility.
Quote: "${extractedWisdom}"`;

    const imageResult = await generate({
      model: gemini15Flash,
      prompt: imagePrompt,
      config: {
        temperature: 0.7,
        maxOutputTokens: 100,
      },
    });

// Extract image data from the response
let imageDataUri = '';

// Check if the response contains image data
const media = imageResult.media?.(); // Call media() if it's a function

if (Array.isArray(media) && media.length > 0) {
  const imageMedia = media.find((m: any) => m.contentType?.startsWith('image/'));

  if (imageMedia?.url) {
    try {
      const response = await fetch(imageMedia.url);
      const arrayBuffer = await response.arrayBuffer();
      const base64 = Buffer.from(arrayBuffer).toString('base64');
      imageDataUri = `data:${imageMedia.contentType};base64,${base64}`;
    } catch (error) {
      console.error('Error converting image to data URI:', error);
      throw new Error('Failed to process generated image');
    }
  }
}

if (!imageDataUri) {
  throw new Error('No image was generated by the AI model');
}

return {
  imageDataUri,
  extractedWisdom,
};

  }
);